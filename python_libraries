=================================================================================
EXPORTAR NOTEBOOK EN FORMATO HTML

jupyter nbconvert <FILE NAME>.ipynb --TagRemovePreprocessor.enabled=True --TagRemovePreprocessor.remove_cell_tags hide_code --to html --no-prompt --TagRemovePreprocessor.remove_all_outputs_tags remove_output --TagRemovePreprocessor.remove_input_tags remove_input   
=================================================================================

==================================================================================
# LIBRERÍAS Y CONFIGURACIÓN DE PANDAS
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

pd.set_option('display.float_format', lambda x: '%.2f' % x)
pd.set_option('display.max_rows', 100)
pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)

import warnings
warnings.filterwarnings("ignore")
==================================================================================


==================================================================================
# GRADIENTE DE COLORES DE DATAWRAPPER PARA USAR EN GRÁFICOS Y EN HEATMAPS
from matplotlib import colors as mcolors
cmap_custom = mcolors.LinearSegmentedColormap.from_list("custom_gradient", ["#f0f9e8", '#b6e3bb','#75c8c5','#4ba8c9','#2989bd','#0a6aad', "#254b8c"])

===================================================================================


===================================================================================
MOSTRAR EN FORMATO DE TABLA LA SALIDA DE UN DESCRIBE

summary_days = sessions[sessions['seconds_btw_sessions'] > 1800].days_btw_sessions.describe()

pretty_summary_days = pd.DataFrame({
    'Metric': ['Count', 'Mean', 'Standard Deviation', 'Minimum', '25th Percentile', 'Median (50th Percentile)', '75th Percentile', 'Maximum'],
    'Days between Sessions': [f'{summary_days["count"]:.0f}', 
              f'{summary_days["mean"]:.2f}', 
              f'{summary_days["std"]:.2f}', 
              f'{summary_days["min"]:.2f}', 
              f'{summary_days["25%"]:.2f}', 
              f'{summary_days["50%"]:.2f}', 
              f'{summary_days["75%"]:.2f}', 
              f'{summary_days["max"]:.2f}']
})


def highlight_median(row):
    return ['background-color: #0a6aad' if row['Metric'] == 'Median (50th Percentile)' else '' for _ in row]


styled_df = (
    pretty_summary_days
    .style
    .apply(highlight_median, axis=1)  # Aplicar la función de resaltar
    .hide(axis="index")  # Ocultar el índice
)

styled_df
==================================================================================


